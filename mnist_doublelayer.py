# -*- coding: utf-8 -*-
"""mnist_doubleLayer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AjJeEGAzk9EcLBh_wRvPDsiLrxOKWTKi
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.examples.tutorials.mnist import input_data

np.random.seed(2019920002)
tf.set_random_seed(2019920002)

mnist = input_data.read_data_sets("/tmp/data/", one_hot=True)

def batch_norm_cnn(batch_image, depth) :

    epsilon = 1e-5
    beta = tf.Variable(tf.constant(0.0, shape=[depth]), trainable=True)
    gamma = tf.Variable(tf.constant(1.0, shape=[depth]), trainable=True)
    mean, variance = tf.nn.moments(batch_image, axes=[0, 1, 2])

    norm_batch = tf.nn.batch_normalization(batch_image, mean, variance, beta, gamma, epsilon)

    return norm_batch


def batch_norm_flat(batch_flat) :

    epsilon = 1e-5
    beta = tf.Variable(tf.constant(0.0, shape=[1]), trainable=True)
    gamma = tf.Variable(tf.constant(1.0, shape=[1]), trainable=True)
    mean, variance = tf.nn.moments(batch_flat, axes=[0])

    norm_batch = tf.nn.batch_normalization(batch_flat, mean, variance, beta, gamma, epsilon)

    return norm_batch

num_filters1 = 32
filterSize_x = 3
filterSize_y = 3


x = tf.placeholder(tf.float32, [None, 784])
x_image = tf.reshape(x, [-1,28,28,1])

W_conv1 = tf.Variable(tf.truncated_normal([filterSize_x,filterSize_y,1,num_filters1],
                                          stddev=0.1))
h_conv1 = tf.nn.conv2d(x_image, W_conv1,
                       strides=[1,1,1,1], padding='SAME')

b_conv1 = tf.Variable(tf.constant(0.1, shape=[num_filters1]))
batch_norm1 = batch_norm_cnn(h_conv1, num_filters1)
h_conv1_cutoff = tf.nn.relu(batch_norm1 + b_conv1)

h_pool1 = tf.nn.max_pool(h_conv1_cutoff, ksize=[1,2,2,1],
                         strides=[1,2,2,1], padding='SAME')

keep_conv_prob = tf.placeholder(tf.float32)
h_pool1_drop = tf.nn.dropout(h_pool1, keep_conv_prob)

num_filters2 = 64

W_conv2 = tf.Variable(
            tf.truncated_normal([filterSize_x,filterSize_y,num_filters1,num_filters2],
                                stddev=0.1))
h_conv2 = tf.nn.conv2d(h_pool1_drop, W_conv2,
                       strides=[1,1,1,1], padding='SAME')

b_conv2 = tf.Variable(tf.constant(0.1, shape=[num_filters2]))
batch_norm2 = batch_norm_cnn(h_conv2, num_filters2)

h_conv2_cutoff = tf.nn.relu(batch_norm2 + b_conv2)

h_pool2 = tf.nn.max_pool(h_conv2_cutoff, ksize=[1,2,2,1],
                         strides=[1,2,2,1], padding='SAME')

h_pool2_drop = tf.nn.dropout(h_pool2, keep_conv_prob)

num_filters3 = 128

W_conv3 = tf.Variable(
            tf.truncated_normal([filterSize_x,filterSize_y,num_filters2,num_filters3],
                                stddev=0.1))
h_conv3 = tf.nn.conv2d(h_pool2_drop, W_conv3,
                       strides=[1,1,1,1], padding='SAME')

b_conv3 = tf.Variable(tf.constant(0.1, shape=[num_filters3]))
batch_norm3 = batch_norm_cnn(h_conv3, num_filters3)
h_conv3_cutoff = tf.nn.relu(h_conv3 + b_conv3)

h_pool3 = tf.nn.max_pool(h_conv3_cutoff, ksize=[1,2,2,1],
                         strides=[1,2,2,1], padding='SAME')

keep_hidden_prob = tf.placeholder(tf.float32)
h_pool3_drop = tf.nn.dropout(h_pool3, keep_conv_prob)

h_pool3_flat = tf.reshape(h_pool3_drop, [-1, 4*4*num_filters3])

num_units1 = 4*4*num_filters3
num_units2 = 256


w2 = tf.Variable(tf.truncated_normal([num_units1, num_units2]))
b2 = tf.Variable(tf.constant(0.1, shape=[num_units2]))
hidden2 = tf.nn.relu(tf.matmul(h_pool3_flat, w2) + b2)
fc_batch_norm = batch_norm_flat(hidden2)

keep_hidden_prob = tf.placeholder(tf.float32)
hidden2_drop = tf.nn.dropout(fc_batch_norm, keep_hidden_prob)


w0 = tf.Variable(tf.zeros([num_units2, 10]))
b0 = tf.Variable(tf.zeros([10]))
p = tf.nn.softmax(tf.matmul(hidden2_drop, w0) + b0)

t = tf.placeholder(tf.float32, [None, 10])
loss = -tf.reduce_sum(t * tf.log(p))
#train_step = tf.train.RMSPropOptimizer(0.001, 0.9).minimize(loss)
train_step = tf.train.AdamOptimizer().minimize(loss)
#train_step = tf.train.AdagradOptimizer(0.01).minimize(loss)
correct_prediction = tf.equal(tf.argmax(p, 1), tf.argmax(t, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

sess = tf.Session()
sess.run(tf.initialize_all_variables())
saver = tf.train.Saver()

# Commented out IPython magic to ensure Python compatibility.
i = 0
acc = []
for _ in range(80000):
    i += 1
    batch_xs, batch_ts = mnist.train.next_batch(30)
    sess.run(train_step,
             feed_dict={x:batch_xs, t:batch_ts, keep_hidden_prob:0.7, keep_conv_prob:0.8})
    if i % 500 == 0:
        loss_vals, acc_vals = [], []
        for c in range(4):
            start = int(len(mnist.test.labels) / 4 * c)
            end = int(len(mnist.test.labels) / 4 * (c+1))
            loss_val, acc_val = sess.run([loss, accuracy],
                feed_dict={x:mnist.test.images[start:end],
                           t:mnist.test.labels[start:end],
                           keep_hidden_prob:1.0, keep_conv_prob:1.0})
            loss_vals.append(loss_val)
            acc_vals.append(acc_val)
        loss_val = np.sum(loss_vals)
        acc_val = np.mean(acc_vals)
        acc.append(acc_val)
        print ('Step: %d, Loss: %f, Accuracy: %f'
#                % (i, loss_val, acc_val))

x_len = (np.arange(len(acc)))*500
#plt.plot(x_len, loss_vals, marker='.', c='blue', label="Test-set Loss")
plt.plot(x_len, acc, marker='.', c='blue', label="Test-set Accuracy")


plt.legend(loc='upper right')
plt.grid()
plt.xlabel('epoch')
plt.ylabel('Accuracy')
plt.yticks(np.arange(0.96, 1.0, 0.01))
plt.rcParams['figure.figsize'] = [10, 10]
plt.show()